@using IToolKit.API.Github;
@using IToolKit.Shared.Components.GitHub
@using IToolKit.Shared.Components.Search

@inherits LayoutComponentBase
@inject IGitHubAPI Github
@inject NavigationManager NavigationManager;

<MudThemeProvider Theme="MyCustomTheme" @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

@*<PWAUpdater />*@

<MudLayout>
    <MudAppBar Dense Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudLink Underline="Underline.None" Href="/" Color="Color.Inherit"><MudText>iToolKit</MudText></MudLink>
        <MudSpacer />
        <MudButton Href="http://www.coffeete.ir/iToolKit" StartIcon="@Icons.Material.Filled.Favorite" IconSize="Size.Large"
                   IconColor="Color.Error" Color="Color.Inherit">Donation</MudButton>
        <GitHubStatus />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>

        @if (breadcrumbLinks.Count > 1)
        {
            <MudBreadcrumbs Items="breadcrumbLinks" Separator="/"></MudBreadcrumbs>
        }

        <GlobalExceptionHandlerer>
            <MudContainer MaxWidth="MaxWidth.Large" Class="mb-4">
                @Body
            </MudContainer>
        </GlobalExceptionHandlerer>
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    bool _isDarkMode = false;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        await Task.CompletedTask;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new string[] { "opensans-regular" }
                },
                H1 = new H1
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "xx-large"
                },
                H2 = new H2
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "x-large"
                },
                H3 = new H3
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "larger"
                },
                H4 = new H4
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "large"
                },
                Subtitle1 = new Subtitle1
                {
                    FontSize = "large",
                    FontWeight = 900
                }
            }
        };


    private string currentUrl;
    List<BreadcrumbItem> breadcrumbLinks = new List<BreadcrumbItem>();


    protected override void OnParametersSet()
    {
        breadcrumbLinks = new List<BreadcrumbItem>();
        currentUrl = NavigationManager.Uri;
        var myUrl = currentUrl.Replace(NavigationManager.BaseUri, "");
        breadcrumbLinks.Add(new BreadcrumbItem("Home", NavigationManager.BaseUri.Substring(0, NavigationManager.BaseUri.Length - 1), NavigationManager.Uri == NavigationManager.BaseUri));

        var path = myUrl.Split('/');
        var count = 1;

        foreach (var link in path)
        {
            if (link == "" || link.ToLower() == "tool") continue;
            count++;
            var lastLink = breadcrumbLinks.Last();
            breadcrumbLinks.Add(new BreadcrumbItem(link, $"{lastLink.Href}/Tool/{link}", link == path.Last()));
        }

        base.OnParametersSet();
    }

}