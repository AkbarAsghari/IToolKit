@using IToolKit.API.Assembly;
@using IToolKit.API.Interfaces;


<MudItem md="4" Class="@Class">
    <MudTextField T="string"
                  Class="pa-0"
                  Placeholder="Search"
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense"
                  Style="@($"background:{Theme.Palette.GrayLight };")"
                  @ref="SearchTextField"
                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                  DebounceInterval="500" OnDebounceIntervalElapsed="Search"
                  InputMode="InputMode.search"
                  OnBlur="OnBlur" />
    <MudPopover Open="@_IsOpen"
                AnchorOrigin="Origin.BottomCenter"
                TransformOrigin="Origin.TopCenter"
                MaxHeight="300"
                Duration="0"
                Paper RelativeWidth>
        <MudList Clickable="true">
            @foreach (var item in _FoundTools)
            {
                <MudListItem Href="@item.Item1" OnClick="SearchItemClick">
                    <MudText>@item.Item2.Header</MudText>
                </MudListItem>
            }
        </MudList>
    </MudPopover>
</MudItem>

@code {
    private MudTheme Theme = new MudTheme();

    [Parameter] public string Class { get; set; }

    MudTextField<string> SearchTextField;
    bool _IsOpen = false;

    List<Tuple<string, IToolProvider>> _FoundTools = new List<Tuple<string, IToolProvider>>();

    void Search(string input)
    {
        _FoundTools.Clear();

        var FindTools = AssemblyTools.GetRouteAndToolProviders()
            .Where(x => x.Item2.Header.Contains(input, StringComparison.InvariantCultureIgnoreCase));

        _FoundTools.AddRange(FindTools);

        _IsOpen = _FoundTools.Count > 0;
    }

    void SearchItemClick()
    {
        _IsOpen = false;
        _FoundTools.Clear();

        SearchTextField.Clear();
    }

    async void OnBlur()
    {
        await Task.Delay(100);
        SearchItemClick();
    }
}
