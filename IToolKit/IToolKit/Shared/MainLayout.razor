@using IToolKit.API.Github;
@inherits LayoutComponentBase
@inject IGitHubAPI Github

<MudThemeProvider Theme="MyCustomTheme" @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

@*<PWAUpdater />*@

<MudLayout>
    <MudAppBar Dense Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        iToolKit
        <MudSpacer />
        <MudButton Size="Size.Small" Class="mr-2" Href="@GithubVersionLink">@GithubVersion</MudButton>
        <MudButton Href="https://github.com/AkbarAsghari/IToolKit"
                   StartIcon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit">
            @GithubStars
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Star"></MudIcon>
        </MudButton>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <UpdateAvailableDetector />
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 mb-4">
            @Body
        </MudContainer>
    </MudMainContent>
    </MudLayout>


    @code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    bool _isDarkMode = false;
    private MudThemeProvider _mudThemeProvider;

    string GithubVersion { get; set; } = String.Empty;
    string GithubVersionLink { get; set; } = String.Empty;
    int GithubStars { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
            var lastRelease = await Github.GetLastReleaseVersion();
            if (lastRelease!=null)
            {
                GithubVersionLink = lastRelease.HtmlUrl;
                GithubVersion = lastRelease.TagName;
            }
            GithubStars = (await Github.GetStars())!.StargazersCount;
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        await Task.CompletedTask;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new string[] { "opensans-medium" }
                },
                H1 = new H1
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "xx-large"
                },
                H2 = new H2
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "x-large"
                },
                H3 = new H3
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "larger"
                },
                H4 = new H4
                {
                    FontFamily = new string[] { "opensans-bold" },
                    FontSize = "large"
                },
                Subtitle1 = new Subtitle1
                {
                    FontSize = "large",
                    FontWeight = 900
                }
            }
        };


}